{
  "Axios interceptor": {
    "prefix": "interceptor",
    "body": [
      "import axios, { AxiosError } from 'axios';",
      "import { appStorageAuthStateId } from '../constants/localStorageKey';",
      "import { accountInfoProps } from '../interfaces/users';",
      "import { setAuthToken } from './login';",
      "",
      "let isRefreshing = false;",
      "let failedRequestsQueue: any = [];",
      "",
      "export const axiosInstance = axios.create({",
      "  baseURL: import.meta.env.VITE_BASE_URL,",
      "});",
      "",
      "axiosInstance.interceptors.response.use(",
      "  (response) => {",
      "    return response;",
      "  },",
      "  (error) => {",
      "    const storage = localStorage.getItem(appStorageAuthStateId);",
      "",
      "    if (storage) {",
      "      const parsedResponse = JSON.parse(storage) as accountInfoProps;",
      "      const { refresh_token } = parsedResponse;",
      "",
      "      if (error.response?.status === 400 || error.response?.status === 401) {",
      "        if (error.response?.data.message === 'jwt expired') {",
      "          const originalConfig = error.config;",
      "",
      "          if (!isRefreshing) {",
      "            isRefreshing = true;",
      "",
      "            axiosInstance",
      "              .get('refreshToken', {",
      "                headers: { refresh_token: `Bearer ${refresh_token}` },",
      "              })",
      "              .then((response) => {",
      "                const { token } = response.data;",
      "",
      "                localStorage.setItem(",
      "                  appStorageAuthStateId,",
      "                  JSON.stringify({",
      "                    isAuthenticated: true,",
      "                    refresh_token: parsedResponse.refresh_token,",
      "                    token: token,",
      "                    user: {",
      "                      email: parsedResponse.user.email,",
      "                      name: parsedResponse.user.name,",
      "                      role: parsedResponse.user.role,",
      "                    },",
      "                  }),",
      "                );",
      "",
      "                setAuthToken(token);",
      "",
      "                failedRequestsQueue.forEach((request: any) =>",
      "                  request.onSuccess(token),",
      "                );",
      "                failedRequestsQueue = [];",
      "              })",
      "              .catch((err) => {",
      "                failedRequestsQueue.forEach((request: any) =>",
      "                  request.onFailed(err),",
      "                );",
      "                failedRequestsQueue = [];",
      "              })",
      "              .finally(() => {",
      "                isRefreshing = false;",
      "              });",
      "          }",
      "",
      "          return new Promise((resolve, reject) => {",
      "            failedRequestsQueue.push({",
      "              onSuccess: (token: string) => {",
      "                originalConfig.headers['Authorization'] = `Bearer ${token}`;",
      "                resolve(axiosInstance(originalConfig));",
      "              },",
      "              onFailed: (err: AxiosError) => {",
      "                reject(err);",
      "              },",
      "            });",
      "          });",
      "        }",
      "      }",
      "",
      "      return Promise.reject(error);",
      "    }",
      "  },",
      ");",
      ""
    ],
    "description": "Axios interceptor"
  }
}
