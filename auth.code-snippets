{
  "useAuth": {
    "prefix": "auth",
    "body": [
      "import {",
      "  createContext,",
      "  ReactNode,",
      "  useCallback,",
      "  useContext,",
      "  useEffect,",
      "  useState,",
      "} from 'react';",
      "",
      "import { Configuration, PublicClientApplication } from '@azure/msal-browser';",
      "",
      "import { useNavigate } from 'react-router-dom';",
      "import { msalConfig, loginRequest } from '../config/configAzureAd';",
      "",
      "import { login, setAuthToken } from '../api/login';",
      "import { getUserInfo } from '../utils/api';",
      "import { accountInfoProps } from '../interfaces/users';",
      "import { appStorageAuthStateId } from '../constants/localStorageKey';",
      "import { useToast } from './useToast';",
      "",
      "const msalInstance = new PublicClientApplication(msalConfig as Configuration);",
      "",
      "interface Props {",
      "  children: ReactNode;",
      "}",
      "interface AuthData {",
      "  signIn: () => Promise<void>;",
      "  signOut: () => void;",
      "  accountInfo: accountInfoProps;",
      "  handleIsLoading: (state: boolean) => void;",
      "  isLoading: boolean;",
      "}",
      "",
      "const AuthContext = createContext({} as AuthData);",
      "",
      "const AuthProvider = ({ children }: Props) => {",
      "  const navigate = useNavigate();",
      "",
      "  const [isLoading, setIsLoading] = useState(false);",
      "",
      "  const handleIsLoading = (state: boolean) => {",
      "    setIsLoading(state);",
      "  };",
      "",
      "  const [accountInfo, setAccountInfo] = useState<accountInfoProps>({",
      "    isAuthenticated: false,",
      "    refresh_token: '',",
      "    token: '',",
      "    user: {",
      "      email: '',",
      "      name: '',",
      "      role: '',",
      "    },",
      "  });",
      "",
      "  const getUserProfile = useCallback(async (accessToken: string) => {",
      "    const userInfo = await getUserInfo(accessToken);",
      "",
      "    return userInfo;",
      "  }, []);",
      "",
      "  const { toastGenericError } = useToast();",
      "",
      "  const signIn = async () => {",
      "    try {",
      "      const { accessToken } = await msalInstance.loginPopup({",
      "        scopes: loginRequest.scopes,",
      "        prompt: 'select_account',",
      "      });",
      "      const { email, department_name, name } = await getUserProfile(",
      "        accessToken,",
      "      );",
      "",
      "      handleIsLoading(true);",
      "",
      "      const response = await login({ email, department_name, name });",
      "",
      "      localStorage.setItem(",
      "        appStorageAuthStateId,",
      "        JSON.stringify({",
      "          isAuthenticated: true,",
      "          refresh_token: response.refresh_token,",
      "          token: response.token,",
      "          user: {",
      "            email: response.user.email,",
      "            name: response.user.name,",
      "            role: response.user.role,",
      "          },",
      "        }),",
      "      );",
      "",
      "      setAccountInfo({",
      "        isAuthenticated: true,",
      "        refresh_token: response.refresh_token,",
      "        token: response.token,",
      "        user: {",
      "          email: response.user.email,",
      "          name: response.user.name,",
      "          role: response.user.role,",
      "        },",
      "      });",
      "",
      "      setAuthToken(response.token);",
      "    } catch (err: any) {",
      "      toastGenericError(err.message);",
      "    } finally {",
      "      handleIsLoading(false);",
      "    }",
      "  };",
      "",
      "  const signOut = () => {",
      "    localStorage.removeItem(appStorageAuthStateId);",
      "    setAccountInfo({",
      "      isAuthenticated: false,",
      "      refresh_token: '',",
      "      token: '',",
      "      user: {",
      "        email: '',",
      "        name: '',",
      "        role: '',",
      "      },",
      "    });",
      "    navigate('/');",
      "  };",
      "",
      "  useEffect(() => {",
      "    (async function loadAuthState(): Promise<void> {",
      "      handleIsLoading(true);",
      "",
      "      try {",
      "        const storage = localStorage.getItem(appStorageAuthStateId);",
      "",
      "        if (storage) {",
      "          const parsedResponse = JSON.parse(storage) as accountInfoProps;",
      "",
      "          if (parsedResponse.token) {",
      "            setAccountInfo(parsedResponse);",
      "            setAuthToken(parsedResponse.token);",
      "          }",
      "        }",
      "      } catch (err: any) {",
      "        signOut();",
      "      } finally {",
      "        handleIsLoading(false);",
      "      }",
      "    })();",
      "  }, []);",
      "",
      "  return (",
      "    <AuthContext.Provider",
      "      value={{",
      "        signIn,",
      "        signOut,",
      "        accountInfo,",
      "        handleIsLoading,",
      "        isLoading,",
      "      }}",
      "    >",
      "      {children}",
      "    </AuthContext.Provider>",
      "  );",
      "};",
      "",
      "const useAuth = () => {",
      "  const context = useContext(AuthContext);",
      "",
      "  if (!context) {",
      "    throw new Error('useAuth must be used within an AuthProvider');",
      "  }",
      "",
      "  return context;",
      "};",
      "",
      "export { AuthProvider, useAuth };",
      ""
    ],
    "description": "useAuth"
  }
}
